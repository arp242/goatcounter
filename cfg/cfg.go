//go:generate sh -c "go run gen.go > cfg.go"

// Code generated by gen.go; DO NOT EDIT.

// Package cfg handles the application configuration.
package cfg

import (
	"flag"
	"fmt"
)

// Configuration variables.
var (
	Prod         bool   // Production mode: hide errors, don't reload.
	Version      string // Version tag; normally set during compile
	Domain       string // Base domain
	DomainStatic string // Comma-separated list of domain to serve static files from.
	Listen       string // Address to listen on.
	DBFile       string // Database connection string.
	PgSQL        bool   // Use PostgreSQL instead of SQLite
	SMTP         string // SMTP connection string; outputs to stdout when empty.
	EmailErrors  string // Email errors to this address
	Stripe       string // Stripe keys: need secret, publishable, and webhook (sk_*, pk_*, whsec_*) keys as colon-separated
	CPUProfile   string // Write CPU profile to this file.
	MemProfile   string // Write memory profile to this file.
	CertDir      string // Directory to store ACME-generated certificates for custom domains
	Plan         string // Plan for new installations
	Debug        string // Modules to debug, comma-separated or 'all' for all modules.
	TLS          string // Path to TLS certificate and keyfile, as 'certfile:keyfile', which should be a wildcard cert for *.domain. Port 80 will be redirected automatically.
)

// Set configuration variables from os.Args.
func Set() {
	flag.BoolVar(&Prod, "prod", false, "Production mode: hide errors, don't reload.")
	flag.StringVar(&Version, "version", "", "Version tag; normally set during compile")
	flag.StringVar(&Domain, "domain", "goatcounter.localhost", "Base domain")
	flag.StringVar(&DomainStatic, "domainstatic", "static.goatcounter.localhost", "Comma-separated list of domain to serve static files from.")
	flag.StringVar(&Listen, "listen", "localhost:8081", "Address to listen on.")
	flag.StringVar(&DBFile, "dbconnect", "db/goatcounter.sqlite3", "Database connection string.")
	flag.BoolVar(&PgSQL, "pgsql", false, "Use PostgreSQL instead of SQLite")
	flag.StringVar(&SMTP, "smtp", "", "SMTP connection string; outputs to stdout when empty.")
	flag.StringVar(&EmailErrors, "emailerrors", "", "Email errors to this address")
	flag.StringVar(&Stripe, "stripe", "", "Stripe keys: need secret, publishable, and webhook (sk_*, pk_*, whsec_*) keys as colon-separated")
	flag.StringVar(&CPUProfile, "cpuprofile", "", "Write CPU profile to this file.")
	flag.StringVar(&MemProfile, "memprofile", "", "Write memory profile to this file.")
	flag.StringVar(&CertDir, "certdir", "", "Directory to store ACME-generated certificates for custom domains")
	flag.StringVar(&Plan, "plan", "business", "Plan for new installations")
	flag.StringVar(&Debug, "debug", "", "Modules to debug, comma-separated or 'all' for all modules.")
	flag.StringVar(&TLS, "tls", "", "Path to TLS certificate and keyfile, as 'certfile:keyfile', which should be a wildcard cert for *.domain. Port 80 will be redirected automatically.")
	flag.Parse()
}

// Print out all configuration values.
func Print() {
	fmt.Printf("Prod           %#v\n", Prod)
	fmt.Printf("Version        %#v\n", Version)
	fmt.Printf("Domain         %#v\n", Domain)
	fmt.Printf("DomainStatic   %#v\n", DomainStatic)
	fmt.Printf("Listen         %#v\n", Listen)
	fmt.Printf("DBFile         %#v\n", DBFile)
	fmt.Printf("PgSQL          %#v\n", PgSQL)
	fmt.Printf("SMTP           %#v\n", SMTP)
	fmt.Printf("EmailErrors    %#v\n", EmailErrors)
	fmt.Printf("Stripe         %#v\n", Stripe)
	fmt.Printf("CPUProfile     %#v\n", CPUProfile)
	fmt.Printf("MemProfile     %#v\n", MemProfile)
	fmt.Printf("CertDir        %#v\n", CertDir)
	fmt.Printf("Plan           %#v\n", Plan)
	fmt.Printf("Debug          %#v\n", Debug)
	fmt.Printf("TLS            %#v\n", TLS)
}
